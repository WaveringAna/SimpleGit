diff --git a/config.json b/config.json
index 75d5ae0..48ae659 100644
--- a/config.json
+++ b/config.json
@@ -4,5 +4,7 @@
     "date_format": "Jan 2, 2006 15:04:05",
     "date_format_comment": "See https://pkg.go.dev/time#pkg-constants for format options",
     "max_file_size": 20485760,
-    "max_file_size_comment": "Maximum file size to display in bytes (10 MB)"
+    "max_file_size_comment": "Maximum file size to display in bytes (10 MB)",
+    "data_dir": "data",
+    "jwt_secret": "jfd29am3"
 }
diff --git a/config/config.go b/config/config.go
index b1b823b..749bc8b 100644
--- a/config/config.go
+++ b/config/config.go
@@ -1,3 +1,5 @@
+//config/config.go
+
 package config
 
 import (
@@ -11,6 +13,9 @@ type Config struct {
 	Port        int    `json:"port"`
 	DateFormat  string `json:"date_format"`
 	MaxFileSize int64  `json:"max_file_size"`
+	DataDir     string `json:"data_dir"`
+	JWTSecret   string `json:"jwt_secret"`
+	Domain      string `json:"domain"`
 }
 
 var GlobalConfig Config
@@ -23,4 +28,9 @@ func Init() {
 	if err := json.Unmarshal(data, &GlobalConfig); err != nil {
 		log.Fatal("Failed to parse config:", err)
 	}
+
+	// Set default domain if not specified
+	if GlobalConfig.Domain == "" {
+		GlobalConfig.Domain = "localhost"
+	}
 }
diff --git a/go.mod b/go.mod
index 21dec83..40718a3 100644
--- a/go.mod
+++ b/go.mod
@@ -7,6 +7,13 @@ require (
 	gopkg.in/src-d/go-git.v4 v4.13.1
 )
 
+require (
+	github.com/jinzhu/inflection v1.0.0 // indirect
+	github.com/jinzhu/now v1.1.5 // indirect
+	github.com/mattn/go-sqlite3 v1.14.22 // indirect
+	golang.org/x/text v0.21.0 // indirect
+)
+
 require (
 	dario.cat/mergo v1.0.0 // indirect
 	github.com/Microsoft/go-winio v0.6.1 // indirect
@@ -16,7 +23,9 @@ require (
 	github.com/emirpasic/gods v1.18.1 // indirect
 	github.com/go-git/gcfg v1.5.1-0.20230307220236-3a3c6141e376 // indirect
 	github.com/go-git/go-billy/v5 v5.6.1 // indirect
+	github.com/golang-jwt/jwt/v5 v5.2.1
 	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
+	github.com/google/uuid v1.6.0
 	github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 // indirect
 	github.com/kevinburke/ssh_config v1.2.0 // indirect
 	github.com/pjbgf/sha1cd v0.3.0 // indirect
@@ -30,4 +39,6 @@ require (
 	golang.org/x/sys v0.28.0 // indirect
 	golang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d // indirect
 	gopkg.in/warnings.v0 v0.1.2 // indirect
+	gorm.io/driver/sqlite v1.5.7
+	gorm.io/gorm v1.25.12
 )
diff --git a/go.sum b/go.sum
index 68603ef..e5c82f4 100644
--- a/go.sum
+++ b/go.sum
@@ -36,14 +36,22 @@ github.com/go-git/go-git-fixtures/v4 v4.3.2-0.20231010084843-55a94097c399 h1:eMj
 github.com/go-git/go-git-fixtures/v4 v4.3.2-0.20231010084843-55a94097c399/go.mod h1:1OCfN199q1Jm3HZlxleg+Dw/mwps2Wbk9frAWm+4FII=
 github.com/go-git/go-git/v5 v5.13.1 h1:DAQ9APonnlvSWpvolXWIuV6Q6zXy2wHbN4cVlNR5Q+M=
 github.com/go-git/go-git/v5 v5.13.1/go.mod h1:qryJB4cSBoq3FRoBRf5A77joojuBcmPJ0qu3XXXVixc=
+github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
+github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
 github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
 github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
 github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
 github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
+github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=
 github.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i6rXxKeerYnT8Nvf0QmHCRC1n8sfWVwXF2Frvo=
 github.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=
+github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=
+github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=
+github.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=
+github.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=
 github.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=
 github.com/kevinburke/ssh_config v1.2.0 h1:x584FjTGwHzMwvHx18PXxbBVzfnxogHaAReU4gf13a4=
 github.com/kevinburke/ssh_config v1.2.0/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=
@@ -55,6 +63,8 @@ github.com/kr/pty v1.1.8/go.mod h1:O1sed60cT9XZ5uDucP5qwvh+TE3NnUj51EiZO/lmSfw=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
 github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
+github.com/mattn/go-sqlite3 v1.14.22 h1:2gZY6PC6kBnID23Tichd1K+Z0oS6nE/XwU+Vz/5o4kU=
+github.com/mattn/go-sqlite3 v1.14.22/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=
 github.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=
 github.com/onsi/gomega v1.34.1 h1:EUMJIKUjM8sKjYbtxQI9A4z2o+rruxnzNvpknOXie6k=
 github.com/onsi/gomega v1.34.1/go.mod h1:kU1QgUvBDLXBJq618Xvm2LUX6rSAfRaFRTcdOeDLwwY=
@@ -143,3 +153,7 @@ gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
 gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gorm.io/driver/sqlite v1.5.7 h1:8NvsrhP0ifM7LX9G4zPB97NwovUakUxc+2V2uuf3Z1I=
+gorm.io/driver/sqlite v1.5.7/go.mod h1:U+J8craQU6Fzkcvu8oLeAQmi50TkwPEhHDEjQZXDah4=
+gorm.io/gorm v1.25.12 h1:I0u8i2hWQItBq1WfE0o2+WuL9+8L21K9e2HHSTE/0f8=
+gorm.io/gorm v1.25.12/go.mod h1:xh7N7RHfYlNc5EmcI/El95gXusucDrQnHXe0+CgWcLQ=
diff --git a/handlers/handlers.go b/handlers/handlers.go
index d55a2e5..b194ebf 100644
--- a/handlers/handlers.go
+++ b/handlers/handlers.go
@@ -1,3 +1,5 @@
+//handlers/handlers.go
+
 package handlers
 
 import (
@@ -15,12 +17,16 @@ import (
 	"SimpleGit/utils"
 
 	"github.com/go-git/go-git/v5/plumbing"
+	"github.com/google/uuid"
+	"gorm.io/gorm"
 )
 
 type Server struct {
-	RepoPath string
-	Repos    map[string]*models.Repository
-	tmpl     *template.Template
+	RepoPath    string
+	Repos       map[string]*models.Repository
+	tmpl        *template.Template
+	userService *models.UserService
+	db          *gorm.DB
 }
 
 func NewServer(repoPath string) (*Server, error) {
@@ -79,9 +85,17 @@ func (s *Server) handleIndex(w http.ResponseWriter, r *http.Request) {
 		return
 	}
 
-	if err := s.tmpl.ExecuteTemplate(w, "index.html", map[string]interface{}{
+	// Ensure all repositories are loaded
+	if err := s.ScanRepositories(); err != nil {
+		models.HandleError(w, r, models.NewInternalError("Failed to scan repositories").WithError(err))
+		return
+	}
+
+	data := map[string]interface{}{
 		"Repos": s.Repos,
-	}); err != nil {
+	}
+
+	if err := s.tmpl.ExecuteTemplate(w, "index.html", data); err != nil {
 		models.HandleError(w, r, models.NewInternalError("Failed to render template").WithError(err))
 	}
 }
@@ -108,8 +122,17 @@ func (s *Server) handleViewRepo(w http.ResponseWriter, r *http.Request) {
 	repoName := parts[1]
 	repo, ok := s.Repos[repoName]
 	if !ok {
-		models.HandleError(w, r, models.NewNotFoundError("Repository not found").WithDetail(fmt.Sprintf("Repository: %s", repoName)))
-		return
+		// Try to rescan repositories in case it was just created
+		if err := s.ScanRepositories(); err != nil {
+			models.HandleError(w, r, models.NewInternalError("Failed to scan repositories").WithError(err))
+			return
+		}
+
+		repo, ok = s.Repos[repoName]
+		if !ok {
+			models.HandleError(w, r, models.NewNotFoundError("Repository not found").WithDetail(fmt.Sprintf("Repository: %s", repoName)))
+			return
+		}
 	}
 
 	path := strings.Join(parts[2:], "/")
@@ -117,18 +140,31 @@ func (s *Server) handleViewRepo(w http.ResponseWriter, r *http.Request) {
 	// Get repository data
 	branches, err := repo.GetBranches()
 	if err != nil {
-		models.HandleError(w, r, models.NewGitError("Failed to get branches", err))
-		return
+		// Don't treat this as an error for empty repos
+		branches = []string{}
 	}
 
-	branch := r.URL.Query().Get("branch")
-	if branch == "" && len(branches) > 0 {
-		branch = branches[0]
+	// Handle empty repository case
+	if len(branches) == 0 {
+		data := map[string]interface{}{
+			"Repo":     repo,
+			"Path":     path,
+			"Branches": []string{},
+			"Branch":   "",
+			"Entries":  []models.TreeEntry{},
+			"Commits":  []models.Commit{},
+			"IsEmpty":  true,
+		}
+
+		if err := s.tmpl.ExecuteTemplate(w, "repo.html", data); err != nil {
+			models.HandleError(w, r, models.NewInternalError("Failed to render template").WithError(err))
+		}
+		return
 	}
 
+	branch := r.URL.Query().Get("branch")
 	if branch == "" {
-		models.HandleError(w, r, models.NewGitError("No branches found", nil))
-		return
+		branch = branches[0]
 	}
 
 	gitRepo, err := repo.Git()
@@ -143,7 +179,6 @@ func (s *Server) handleViewRepo(w http.ResponseWriter, r *http.Request) {
 		return
 	}
 
-	// Get the hash string from the reference
 	hashStr := ref.Hash().String()
 
 	entries, err := repo.GetTree(path, hashStr)
@@ -165,6 +200,7 @@ func (s *Server) handleViewRepo(w http.ResponseWriter, r *http.Request) {
 		"Branch":   branch,
 		"Entries":  entries,
 		"Commits":  commits,
+		"IsEmpty":  false,
 	}
 
 	if err := s.tmpl.ExecuteTemplate(w, "repo.html", data); err != nil {
@@ -265,25 +301,77 @@ func (s *Server) ScanRepositories() error {
 		return fmt.Errorf("failed to read repo directory: %w", err)
 	}
 
+	// Create a new map to avoid duplicates
+	repos := make(map[string]*models.Repository)
+
 	for _, entry := range entries {
 		if !entry.IsDir() {
 			continue
 		}
 
-		// Check if it's a git repository
-		gitDir := filepath.Join(s.RepoPath, entry.Name(), ".git")
-		if _, err := os.Stat(gitDir); os.IsNotExist(err) {
+		name := entry.Name()
+		path := filepath.Join(s.RepoPath, name)
+
+		// Check if it's a git repository (has .git directory or is a bare repo)
+		_, errGit := os.Stat(filepath.Join(path, ".git"))
+		_, errBare := os.Stat(filepath.Join(path, "HEAD"))
+
+		if os.IsNotExist(errGit) && os.IsNotExist(errBare) {
+			continue
+		}
+
+		// Get repository info
+		info, err := entry.Info()
+		if err != nil {
 			continue
 		}
 
-		// Add to our cache
-		s.Repos[entry.Name()] = &models.Repository{
-			ID:        entry.Name(), // Use name as ID for now
-			Name:      entry.Name(),
-			Path:      filepath.Join(s.RepoPath, entry.Name()),
-			CreatedAt: time.Now(), // We'll get this from git later
+		// Add or update repository
+		if existing, ok := s.Repos[name]; ok {
+			// Update existing repository
+			existing.Path = path
+			existing.Size = info.Size()
+			repos[name] = existing
+		} else {
+			// Create new repository entry
+			repos[name] = &models.Repository{
+				ID:        name,
+				Name:      name,
+				Path:      path,
+				CreatedAt: info.ModTime(),
+				Size:      info.Size(),
+			}
+		}
+	}
+
+	// Update the server's repository map
+	s.Repos = repos
+	return nil
+}
+
+func (s *Server) InitAdminSetup() error {
+	// Check if admin exists
+	adminCount, err := s.userService.GetAdminCount()
+	if err != nil {
+		return err
+	}
+
+	if adminCount == 0 {
+		// Generate setup token
+		setupToken := uuid.New().String()
+		if err := os.WriteFile("admin_setup_token.txt", []byte(setupToken), 0600); err != nil {
+			return fmt.Errorf("failed to create admin setup token: %w", err)
 		}
+		fmt.Printf("Admin setup token created: %s\n", setupToken)
 	}
 
 	return nil
 }
+
+func (s *Server) SetDB(db *gorm.DB) {
+	s.db = db
+}
+
+func (s *Server) SetUserService(userService *models.UserService) {
+	s.userService = userService
+}
diff --git a/handlers/routes.go b/handlers/routes.go
index 544eff2..9bda38d 100644
--- a/handlers/routes.go
+++ b/handlers/routes.go
@@ -1,3 +1,5 @@
+//handlers/routes.go
+
 package handlers
 
 import (
@@ -24,6 +26,18 @@ func (s *Server) SetupRoutes() {
 	http.HandleFunc("/repo/", s.handleViewRepo)
 	http.HandleFunc("/file/", s.handleViewFile)
 
+	//Auth Route
+	http.HandleFunc("/login", s.handleLogin)
+	http.HandleFunc("/logout", s.handleLogout)
+
 	// API routes
-	http.HandleFunc("/api/repos", s.handleListRepos)
+	http.HandleFunc("/api/repos", s.requireAuth(s.handleListRepos))
+
+	// Admin routes
+	http.HandleFunc("/setup-admin", s.handleAdminSetup)
+	http.HandleFunc("/admin", s.requireAdmin(s.handleAdminDashboard))
+	http.HandleFunc("/admin/repos", s.requireAdmin(s.handleAdminRepos))
+	http.HandleFunc("/admin/users", s.requireAdmin(s.handleAdminUsers))
+	http.HandleFunc("/admin/users/create", s.requireAdmin(s.handleCreateUser))
+	http.HandleFunc("/admin/repos/create", s.requireAdmin(s.handleCreateRepo))
 }
diff --git a/main.go b/main.go
index 27c67c9..b20faad 100644
--- a/main.go
+++ b/main.go
@@ -1,8 +1,12 @@
+//main.go
+
 package main
 
 import (
 	"SimpleGit/config"
+	"SimpleGit/database"
 	"SimpleGit/handlers"
+	"SimpleGit/models"
 	"fmt"
 	"log"
 	"net/http"
@@ -11,15 +15,32 @@ import (
 func main() {
 	config.Init()
 
+	// Initialize database
+	db, err := database.InitDB(config.GlobalConfig.DataDir)
+	if err != nil {
+		log.Fatal(err)
+	}
+
+	// Initialize user service with JWT key
+	userService := models.NewUserService(db, []byte(config.GlobalConfig.JWTSecret))
+
 	server, err := handlers.NewServer("./repositories")
 	if err != nil {
 		log.Fatal(err)
 	}
 
+	// Set database and user service
+	server.SetDB(db)
+	server.SetUserService(userService)
+
 	if err := server.ScanRepositories(); err != nil {
 		log.Fatal(err)
 	}
 
+	if err := server.InitAdminSetup(); err != nil {
+		log.Fatal(err)
+	}
+
 	server.SetupRoutes()
 
 	addr := fmt.Sprintf(":%d", config.GlobalConfig.Port)
diff --git a/models/error.go b/models/error.go
index 57c883b..129ab41 100644
--- a/models/error.go
+++ b/models/error.go
@@ -1,3 +1,5 @@
+//models/error.go
+
 package models
 
 import (
diff --git a/models/repository.go b/models/repository.go
index cefe099..5ecb543 100644
--- a/models/repository.go
+++ b/models/repository.go
@@ -1,7 +1,11 @@
+//models/repository.go
+
 package models
 
 import (
+	config "SimpleGit/config"
 	"errors"
+	"fmt"
 	"path/filepath"
 	"sort"
 	"strings"
@@ -18,6 +22,7 @@ type Repository struct {
 	Path        string    `json:"path"`
 	Description string    `json:"description"`
 	CreatedAt   time.Time `json:"created_at"`
+	Size        int64     `json:"size"`
 	git         *git.Repository
 }
 
@@ -30,6 +35,15 @@ type TreeEntry struct {
 	Message string `json:"message"`
 }
 
+type Commit struct {
+	Hash      string
+	Message   string
+	Author    string
+	Email     string
+	Date      time.Time
+	ShortHash string // First 7 characters of the hash
+}
+
 type CommitInfo struct {
 	Hash      string    `json:"hash"`
 	Author    string    `json:"author"`
@@ -38,7 +52,7 @@ type CommitInfo struct {
 	Timestamp time.Time `json:"timestamp"`
 }
 
-func (r *Repository) OpenGit() error {
+func (r *Repository) initGit() error {
 	if r.git != nil {
 		return nil
 	}
@@ -47,19 +61,20 @@ func (r *Repository) OpenGit() error {
 	if err != nil {
 		return err
 	}
+
 	r.git = repo
 	return nil
 }
 
 func (r *Repository) Git() (*git.Repository, error) {
-	if err := r.OpenGit(); err != nil {
+	if err := r.initGit(); err != nil {
 		return nil, err
 	}
 	return r.git, nil
 }
 
 func (r *Repository) GetTree(path, ref string) ([]TreeEntry, error) {
-	if err := r.OpenGit(); err != nil {
+	if err := r.initGit(); err != nil {
 		return nil, err
 	}
 
@@ -169,7 +184,7 @@ func (r *Repository) GetTree(path, ref string) ([]TreeEntry, error) {
 }
 
 func (r *Repository) GetCommits(ref string, limit int) ([]CommitInfo, error) {
-	if err := r.OpenGit(); err != nil {
+	if err := r.initGit(); err != nil {
 		return nil, err
 	}
 
@@ -204,7 +219,7 @@ func (r *Repository) GetCommits(ref string, limit int) ([]CommitInfo, error) {
 }
 
 func (r *Repository) GetFile(path, branch string) ([]byte, error) {
-	if err := r.OpenGit(); err != nil {
+	if err := r.initGit(); err != nil {
 		return nil, NewGitError("Failed to open repository", err)
 	}
 
@@ -245,10 +260,15 @@ func (r *Repository) GetFile(path, branch string) ([]byte, error) {
 }
 
 func (r *Repository) GetBranches() ([]string, error) {
-	if err := r.OpenGit(); err != nil {
+	if err := r.initGit(); err != nil {
 		return nil, err
 	}
 
+	// If repository is empty, return empty slice
+	if r.git == nil {
+		return []string{}, nil
+	}
+
 	branches := []string{}
 	branchIter, err := r.git.Branches()
 	if err != nil {
@@ -260,6 +280,23 @@ func (r *Repository) GetBranches() ([]string, error) {
 		branches = append(branches, name)
 		return nil
 	})
+	if err != nil {
+		return nil, err
+	}
+
+	return branches, nil
+}
+
+func (r *Repository) CloneURL() string {
+	// For development/local setup
+	if config.GlobalConfig.Domain == "localhost" {
+		return fmt.Sprintf("http://localhost:%d/repo/%s.git",
+			config.GlobalConfig.Port,
+			r.Name)
+	}
 
-	return branches, err
+	// For production setup
+	return fmt.Sprintf("http://%s/repo/%s.git",
+		config.GlobalConfig.Domain,
+		r.Name)
 }
diff --git a/static/css/style.css b/static/css/style.css
index 6379269..e2b6c89 100644
--- a/static/css/style.css
+++ b/static/css/style.css
@@ -429,4 +429,255 @@ tr.highlighted {
 
 .error-container a:hover {
     text-decoration: underline;
+}
+
+.error-container a:hover {
+    text-decoration: underline;
+}
+
+.form-group {
+    margin-bottom: 1rem;
+}
+
+.form-group label {
+    display: block;
+    margin-bottom: 0.5rem;
+    color: #E5E9F0;
+}
+
+.form-group input {
+    width: 100%;
+    padding: 0.5rem;
+    border: 1px solid #2E323A;
+    border-radius: 4px;
+    background: #1F2126;
+    color: #E5E9F0;
+}
+
+.form-group input:focus {
+    outline: none;
+    border-color: #61AFEF;
+    box-shadow: 0 0 0 2px rgba(97, 175, 239, 0.2);
+}
+
+.error-message {
+    padding: 0.75rem;
+    margin-bottom: 1rem;
+    background: #3B2532;
+    border: 1px solid #E06C75;
+    border-radius: 4px;
+    color: #E06C75;
+}
+
+button {
+    padding: 0.5rem 1rem;
+    background: #61AFEF;
+    border: none;
+    border-radius: 4px;
+    color: #1F2126;
+    font-weight: 500;
+    cursor: pointer;
+    transition: background-color 0.2s ease;
+}
+
+button:hover {
+    background: #7BC3FF;
+}
+
+button:active {
+    background: #4E8CC7;
+}
+
+button:active {
+    background: #4E8CC7;
+}
+
+/* Admin styles */
+.admin-nav {
+    display: flex;
+    gap: 1rem;
+    align-items: center;
+}
+
+.admin-nav a {
+    color: #ABB2BF;
+    text-decoration: none;
+    padding: 0.5rem;
+    border-radius: 4px;
+    transition: color 0.2s ease;
+}
+
+.admin-nav a:hover {
+    color: #E5E9F0;
+}
+
+.admin-nav a.active {
+    color: #61AFEF;
+}
+
+.admin-dashboard {
+    display: flex;
+    flex-direction: column;
+    gap: 2rem;
+}
+
+.admin-stats {
+    display: grid;
+    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+    gap: 1rem;
+}
+
+.stat-card {
+    background: #262931;
+    border: 1px solid #2E323A;
+    border-radius: 6px;
+    padding: 1.5rem;
+}
+
+.stat-card h3 {
+    margin: 0;
+    color: #ABB2BF;
+    font-size: 1rem;
+}
+
+.stat-value {
+    font-size: 2rem;
+    font-weight: bold;
+    color: #61AFEF;
+    margin-top: 0.5rem;
+}
+
+.admin-grid {
+    display: grid;
+    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
+    gap: 2rem;
+}
+
+.admin-section {
+    background: #262931;
+    border: 1px solid #2E323A;
+    border-radius: 6px;
+    padding: 1.5rem;
+}
+
+.admin-section h2 {
+    margin: 0 0 1rem 0;
+    font-size: 1.25rem;
+    color: #E5E9F0;
+}
+
+.admin-container {
+    background: #262931;
+    border: 1px solid #2E323A;
+    border-radius: 6px;
+    padding: 1.5rem;
+}
+
+.action-bar {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    margin-bottom: 1.5rem;
+}
+
+.action-bar h2 {
+    margin: 0;
+}
+
+.create-btn {
+    background: #98C379;
+}
+
+.create-btn:hover {
+    background: #A6CF87;
+}
+
+.admin-list table {
+    width: 100%;
+    border-collapse: collapse;
+}
+
+.admin-list th {
+    text-align: left;
+    padding: 1rem;
+    border-bottom: 2px solid #2E323A;
+    color: #ABB2BF;
+    font-weight: 600;
+}
+
+.admin-list td {
+    padding: 1rem;
+    border-bottom: 1px solid #2E323A;
+}
+
+.actions {
+    display: flex;
+    gap: 0.5rem;
+}
+
+.edit-btn {
+    background: #61AFEF;
+    padding: 0.25rem 0.5rem;
+}
+
+.delete-btn {
+    background: #E06C75;
+    padding: 0.25rem 0.5rem;
+}
+
+.delete-btn:hover {
+    background: #E55561;
+}
+
+.compact {
+    padding: 0.75rem;
+    margin-bottom: 0.5rem;
+}
+
+.compact h3 {
+    font-size: 1rem;
+    margin: 0;
+}
+
+.user-item {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    padding: 0.75rem;
+    border-bottom: 1px solid #2E323A;
+}
+
+.user-role {
+    color: #ABB2BF;
+    font-size: 0.9rem;
+}
+
+.empty-repo {
+    background: #262931;
+    border: 1px solid #2E323A;
+    border-radius: 6px;
+    padding: 2rem;
+    margin: 2rem;
+    text-align: center;
+}
+
+.empty-repo h2 {
+    color: #E5E9F0;
+    margin: 0 0 1rem 0;
+}
+
+.empty-repo p {
+    color: #ABB2BF;
+    margin-bottom: 1.5rem;
+}
+
+.command-block {
+    background: #2E323A;
+    border-radius: 4px;
+    padding: 1rem;
+    text-align: left;
+    color: #E5E9F0;
+    margin: 0;
+    white-space: pre;
+    overflow-x: auto;
 }
\ No newline at end of file
diff --git a/templates/repo.html b/templates/repo.html
index 4435de9..f0e79ff 100644
--- a/templates/repo.html
+++ b/templates/repo.html
@@ -9,6 +9,7 @@
     <header>
         <div class="header-content">
             <h1><a href="/">Git Server</a> / {{.Repo.Name}}</h1>
+            {{if not .IsEmpty}}
             <div class="branch-selector">
                 <select onchange="window.location.href='?branch=' + this.value">
                     {{range .Branches}}
@@ -16,10 +17,24 @@
                     {{end}}
                 </select>
             </div>
+            {{end}}
         </div>
     </header>
 
     <main>
+        {{if .IsEmpty}}
+        <div class="empty-repo">
+            <h2>Empty Repository</h2>
+            <p>This repository is empty. To get started, clone this repository and push your first commit:</p>
+            <pre class="command-block">
+git clone {{.Repo.CloneURL}}
+cd {{.Repo.Name}}
+# make some changes
+git add .
+git commit -m "Initial commit"
+git push origin main</pre>
+        </div>
+        {{else}}
         <div class="repo-content">
             <div class="file-browser">
                 <div class="path-nav">
@@ -82,6 +97,7 @@
                 </div>
             </div>
         </div>
+        {{end}}
     </main>
 </body>
 </html>
\ No newline at end of file
diff --git a/utils/file.go b/utils/file.go
index f9631b2..ebe0343 100644
--- a/utils/file.go
+++ b/utils/file.go
@@ -1,3 +1,5 @@
+//utils/file.go
+
 package utils
 
 import (
